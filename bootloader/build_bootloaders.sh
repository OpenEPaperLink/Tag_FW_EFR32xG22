#!/bin/bash

if [[ "$OSTYPE" =~ ^darwin ]]; then
DEFAULT_PATH="~/SimplicityStudio/SDKs/gsdk_4_4_1"
elif [ -f /.dockerenv ]; then
DEFAULT_PATH="/gecko_sdk/"
else
DEFAULT_PATH=
fi

GSDK_PATH=${GSDK_PATH:=$DEFAULT_PATH}

mkdir ./base_binaries
rm ./base_binaries/*
rm -rf ./out
slc --daemon generate -s ${GSDK_PATH} -p EFR32_SPIF_SingleSlot_BTL.slcp -d ./out -o makefile -cp
cd out

# For some reason, the autogenerated makefile insists on not allowing C define
# overrides. So patch it before running make.
if [[ "$OSTYPE" =~ ^darwin ]]; then
sed -i '' 's/C_DEFS   =/C_DEFS ?=/' EFR32_SPIF_SingleSlot_BTL.Makefile
else
sed -i 's/C_DEFS   =/C_DEFS ?=/' EFR32_SPIF_SingleSlot_BTL.Makefile
fi

# Add capability for flash enable pin
cp ../btl_callbacks_stub_override.c gecko_sdk_4.4.1/platform/bootloader/storage/btl_callbacks_stub.c

# Path the flash driver to deal with inconsistent PDP tables in FMchip-sourced NOR flash
cp ../btl_storage_spiflash_sfdp_patched.c gecko_sdk_4.4.1/platform/bootloader/storage/spiflash_sfdp/btl_storage_spiflash_sfdp.c

# For each hardware type, rebuild the binary and save a copy
env C_DEFS=-DBTL_TYPE_BRD4402B make -f EFR32_SPIF_SingleSlot_BTL.Makefile -j8
retVal=$?
if [ $retVal -ne 0 ]; then
    echo "Error building firmware"
    exit $retVal
fi
cp build/debug/EFR32_SPIF_SingleSlot_BTL.s37 ../base_binaries/BRD4402B_SPIF_BTL.s37
rm build/debug/sdk/platform/bootloader/driver/btl_driver_spi_controller_usart.*
rm build/debug/sdk/platform/bootloader/storage/btl_callbacks_stub.*

env C_DEFS=-DBTL_TYPE_SOLUM make -f EFR32_SPIF_SingleSlot_BTL.Makefile -j8
cp build/debug/EFR32_SPIF_SingleSlot_BTL.s37 ../base_binaries/Solum_SPIF_BTL.s37
rm build/debug/sdk/platform/bootloader/driver/btl_driver_spi_controller_usart.*
rm build/debug/sdk/platform/bootloader/storage/btl_callbacks_stub.*

env C_DEFS=-DBTL_TYPE_DISPLAYDATA make -f EFR32_SPIF_SingleSlot_BTL.Makefile -j8
cp build/debug/EFR32_SPIF_SingleSlot_BTL.s37 ../base_binaries/Displaydata_SPIF_BTL.s37
rm build/debug/sdk/platform/bootloader/driver/btl_driver_spi_controller_usart.*
rm build/debug/sdk/platform/bootloader/storage/btl_callbacks_stub.*

env C_DEFS=-DBTL_TYPE_CUSTOM make -f EFR32_SPIF_SingleSlot_BTL.Makefile -j8
cp build/debug/EFR32_SPIF_SingleSlot_BTL.s37 ../base_binaries/Custom_SPIF_BTL.s37
rm build/debug/sdk/platform/bootloader/driver/btl_driver_spi_controller_usart.*
rm build/debug/sdk/platform/bootloader/storage/btl_callbacks_stub.*

env C_DEFS=-DBTL_TYPE_MODCHIP make -f EFR32_SPIF_SingleSlot_BTL.Makefile -j8
cp build/debug/EFR32_SPIF_SingleSlot_BTL.s37 ../base_binaries/Modchip_SPIF_BTL.s37
rm build/debug/sdk/platform/bootloader/driver/btl_driver_spi_controller_usart.*
rm build/debug/sdk/platform/bootloader/storage/btl_callbacks_stub.*

# ----- Add new HW types here and keep in sync with pinout and python ----

# ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ----
cd ..

# Generate the patched bootloaders (modify ID byte for declaring screen/pinout variant type)
python3 generate_variants.py
